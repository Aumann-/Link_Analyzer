{
    "contents" : "require(igraph)\nrequire(zoo)\nrequire(rgl)\nrequire(rglPlotCustom)\n\n\n#reads data in from csv to data.frame\nreadin <- function()\n{\n  theFile <- \"I:\\\\Capstone\\\\Current_Program\\\\Crawler\\\\Link_data\\\\nsuok.edu\\\\nsuok.csv\"\n  data <- read.table(file = theFile, sep=\",\", header=FALSE, fill=TRUE)\n  return (data)\n}\n\nplot_chart <- function(data)\n{\n  #replaces each NA with the most recent non-NA\n  data[1:ncol(data)] <- sapply(data[1:ncol(data)], na.locf, na.rm=FALSE)\n  #remove any remaining NA\n  data <- na.omit(data)\n  \n  #combine data by columns\n  edges <- rbind(data[1:2], setNames(data[2:3], names(data[1:2])))\n  \n  #generate base chart of data\n  chart <- graph.data.frame(edges)\n  \n  #remove curved lines from graph\n  E(chart)$curved <- 0\n  \n  #win.graph(150,100,4)\n  \n  #plot data as 3D tree\n  #vertex.size sets size of points at each vertex (set to 0 to avoid overlapping text)\n  #edge.arrow.size sets size of arrow leading to each point(set to 0 for readability)\n  #layout set to \"PENDING\"\n  #asp set to 0 so model will cover entire window\n  rglplot2(chart, vertex.size = 0, vertex.label.cex=0.6,#vertex.label=NA,\n          edge.arrow.size = 0, edge.width = 0.25,\n          layout = layout.fruchterman.reingold(chart, dim=3),\n          asp = 0)  \n}\n\ntest <- function()\n{\n  t <- readin()\n  plot_chart(t)\n}",
    "created" : 1424580491060.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1463894208",
    "id" : "1F774FBB",
    "lastKnownWriteTime" : 1425158182,
    "path" : "I:/Capstone/Current_Program/Analyzer/Analyzer/R/tree_gen_test.R",
    "project_path" : "R/tree_gen_test.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}