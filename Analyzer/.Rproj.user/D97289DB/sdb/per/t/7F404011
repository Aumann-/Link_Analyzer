{
    "contents" : "require(shiny)\nrequire(TeachingDemos)\nrequire(igraph)\nrequire(zoo)\nrequire(rgl)\nrequire(rglPlotCustom)\noptions(shiny.maxRequestSize=5*1024^2)\n\nshinyServer(function(input, output){ \n  #function to export tree as PNG after rendering as an image\n  observe({\n    if (input$exportPNG == 0)\n    {\n      return()\n    }\n    \n    rgl.snapshot(\"tree.png\", \"png\", top = TRUE)\n  })\n  \n  #function to export as OBJ\n  observe({\n    if (input$exportOBJ == 0)\n    {\n      return()\n    }\n    \n    writeSTL(\"tree.stl\")\n    #writeOBJ(\"tree.obj\")\n  })\n  \n  #function to reset graphics devices\n  observe({\n    if (input$reset == 0)\n    {\n      return()\n    }\n    \n    graphics.off()\n  })\n  \n  #function to generate tree and display data in table\n  output$contents <- renderTable({\n    input$submit #set dependency on submit button\n    mydata = NULL\n    \n    isolate({\n      theFile <- NULL\n      theFile <- input$file #get file info from input\n      mydata <- NULL\n    \n      if (is.null(theFile)) #check if file is null\n      {\n        mydata <- NULL        \n      } else\n      {\n        #determine how to read file based on radio buttons\n        switch(input$fileType,\n             \"Crawled\" = (mydata <- read.table(file = theFile$datapath, sep=\",\", header=FALSE, fill=TRUE)),\n             \"Duplicates\" = (mydata <- read.table(file = theFile$datapath, header = TRUE, sep=\",\")),\n             \"Tocrawl\" = (mydata <- read.table(file = theFile$datapath, header = TRUE, sep=\",\")))\n      }\n      \n      #check if button has been presses\n      if (input$submit == 0) #if not\n      {\n        return() #do nothing\n      } else\n      {\n        #if pressed, check which function to call\n        switch(input$fileType,\n               \"Crawled\" = plot_crawled(mydata, input$fontSize, input$displayLabel),\n               \"Duplicates\" = plot_dup(mydata),\n               \"Tocrawl\" = plot_dup(mydata),\n               NULL)\n      } #close else\n      \n      #mydata\n    }) #close isolate  \n  }) #close renderTable\n  \n  #function to generate interactive scatterplot for duplicates/tocrawl files\n  plot_dup <- function(mydata)\n  {\n    #open graph window\n    win.graph(40,25,8)\n    #change margins for plot (bottom, left, top, right)\n    #defaults= 5.1, 4.1, 4.1, 2.1\n    par(mar=c(5.1,4,4.1,2))\n    #generate plot with interactive points for info\n    HWidentify(mydata$Link, mydata$Occurrence, label = paste(mydata$Link, \"-\", mydata$Occurrence), main=\"Link Occurrences\",\n               sub=paste(nrow(mydata), \" Links\"), xlab = \"Mouseover for Link\",\n               ylab = \"Occurrence\", clean=TRUE,\n               adj=c(0.5, 3), xaxt=\"n\")\n    \n    #Current test to wite plot to saved image\n    #dev.copy(jpeg, filename=\"I:\\\\test.jpg\")\n  }\n  \n  #function to generate 3D tree for crawled files\n  plot_crawled <- function(mydata, size, displayLabel)\n  {\n    #replaces each NA with the most recent non-NA\n    mydata[1] <- na.locf(mydata[1], na.rm=FALSE)\n    \n    #remove any remaining NA\n    for(i in ncol(mydata):2)\n    {\n      mydata[[i-1]] <- ifelse(!is.na(mydata[[i]]), na.locf(mydata[[i-1]], na.rm=FALSE),\n                              mydata[[i-1]])\n    }\n\n    #combine mydata by columns\n    edges <- rbind(na.omit(mydata[1:2]), \n                   do.call('rbind', \n                           lapply(1:(ncol(mydata)-2), function(i)\n                             na.omit(setNames(mydata[(1+i):(2+i)],\n                                              names(mydata[1:2])))))\n    )\n    \n    #generate base chart of mydata\n    chart <- graph.data.frame(edges)\n    \n    #remove curved lines from graph\n    E(chart)$curved <- 0\n    \n    #plot mydata as 3D tree\n    #vertex.size sets size of points at each vertex (set to 0 to avoid overlapping text)\n    #edge.arrow.size sets size of arrow leading to each point(set to 0 for readability)\n    #vertex.label.cex sets font size of vertex labels\n    #vertex.label=NA disables showing of vertex labels\n    #layout set to fruchterman.reingold for 3D spherical tree\n    #asp set to 0 so model will cover entire window\n    #if displayLabel checkbox is checked, show labels using size from sliders\n    if(displayLabel == TRUE)\n    {\n      rglplot2(chart, \n              vertex.size = 0,  \n              vertex.label.cex=size,\n              edge.arrow.size = 0, edge.width = 0.25,\n              layout = layout.fruchterman.reingold(chart, dim=3),\n              asp = 0)\n    } else #if unchecked, don't display labels\n    {\n      rglplot2(chart, \n               vertex.size = 3, \n               vertex.label=NA, \n               edge.arrow.size = 0, edge.width = 3,\n               layout = layout.fruchterman.reingold(chart, dim=3),\n               asp = 0) \n    }\n  }\n  \n})",
    "created" : 1428538333627.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2680620280",
    "id" : "7F404011",
    "lastKnownWriteTime" : 1429712018,
    "path" : "I:/Capstone/Current_Program/Analyzer/Analyzer/R/server.R",
    "project_path" : "R/server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}