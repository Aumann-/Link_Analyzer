{
    "contents" : "require(shiny)\nrequire(TeachingDemos)\nrequire(igraph)\nrequire(zoo)\nrequire(rgl)\nrequire(rglPlotCustom)\n\nshinyServer(function(input, output){ \n  \n  #function to export tree after rendering as an image\n  observe({\n    if (input$exportRGL == 0)\n    {\n      return()\n    }\n    #rgl.snapshot(\"test.png\", \"png\", top = TRUE)\n    #writeSTL(\"test.stl\")\n    writeOBJ(\"test.obj\")\n  })\n  \n  #function to generate tree and display data in table\n  output$contents <- renderTable({\n    input$submit #set dependency on submit button\n    mydata = NULL\n    \n    isolate({\n      theFile <- input$file #get file info from input\n      mydata <- NULL\n    \n      if (is.null(theFile)) #check if file is null\n      {\n        mydata <- NULL        \n      } else\n      {\n        #determine how to read file based on radio buttons\n        switch(input$fileType,\n             \"Crawled\" = (mydata <- read.table(file = theFile$datapath, sep=\",\", header=FALSE, fill=TRUE)),\n             \"Duplicates\" = (mydata <- read.table(file = theFile$datapath, header = TRUE, sep=\",\")),\n             \"Tocrawl\" = (mydata <- read.table(file = theFile$datapath, header = TRUE, sep=\",\")))\n      }\n      \n      #check if button has been presses\n      if (input$submit == 0) #if not\n      {\n        return() #do nothing\n      } else\n      {\n        #if pressed, check which function to call\n        switch(input$fileType,\n               \"Crawled\" = plot_crawled(mydata, input$fontSize, input$displayLabel),\n               \"Duplicates\" = plot_dup(mydata),\n               \"Tocrawl\" = plot_dup(mydata),\n               NULL)\n      } #close else\n      \n      mydata\n    }) #close isolate  \n  }) #close renderTable\n  \n  #function to generate interactive scatterplot for duplicates/tocrawl files\n  plot_dup <- function(mydata)\n  {\n    #open graph window\n    win.graph(40,25,8)\n    #change margins for plot (bottom, left, top, right)\n    #defaults= 5.1, 4.1, 4.1, 2.1\n    par(mar=c(5.1,4,4.1,2))\n    #generate plot with interactive points for info\n    HWidentify(mydata$Link, mydata$Occurrence, label = paste(mydata$Link, \"-\", mydata$Occurrence), main=\"Link Occurrences\",\n               sub=paste(nrow(mydata), \" Links\"), xlab = \"Mouseover for Link\",\n               ylab = \"Occurrence\", clean=TRUE,\n               adj=c(0.5, 3), xaxt=\"n\")\n    \n    #Current test to wite plot to saved image\n    #dev.copy(jpeg, filename=\"I:\\\\test.jpg\")\n  }\n  \n  #function to generate 3D tree for crawled files\n  plot_crawled <- function(mydata, size, displayLabel)\n  {\n    #replaces each NA with the most recent non-NA\n    mydata[1:ncol(mydata)] <- sapply(mydata[1:ncol(mydata)], na.locf, na.rm=FALSE)\n    #remove any remaining NA\n    mydata <- na.omit(mydata)\n    \n    #combine mydata by columns\n    edges <- rbind(mydata[1:2], setNames(mydata[2:3], names(mydata[1:2])))\n    \n    #generate base chart of mydata\n    chart <- graph.data.frame(edges)\n    \n    #remove curved lines from graph\n    E(chart)$curved <- 0\n    \n    #plot mydata as 3D tree\n    #vertex.size sets size of points at each vertex (set to 0 to avoid overlapping text)\n    #edge.arrow.size sets size of arrow leading to each point(set to 0 for readability)\n    #vertex.label.cex sets font size of vertex labels\n    #vertex.label=NA disables showing of vertex labels\n    #layout set to fruchterman.reingold for 3D spherical tree\n    #asp set to 0 so model will cover entire window\n    #if displayLabel checkbox is checked, show labels using size from sliders\n    if(displayLabel == TRUE)\n    {\n    rglplot2(chart, vertex.size = 0,  \n             vertex.label.cex=size,\n             edge.arrow.size = 0, edge.width = 0.25,\n             layout = layout.fruchterman.reingold(chart, dim=3),\n             asp = 0)\n    } else #if unchecked, don't display labels\n    {\n      rglplot2(chart, vertex.size = 2, \n               vertex.label=NA, \n               edge.arrow.size = 0, edge.width = 0.5,\n               layout = layout.fruchterman.reingold(chart, dim=3),\n               asp = 0) \n    }\n  }\n  \n})",
    "created" : 1427144027568.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2052494029",
    "id" : "97173C42",
    "lastKnownWriteTime" : 1427319848,
    "path" : "E:/Capstone/Current_Program/Analyzer/Analyzer/R/server.R",
    "project_path" : "R/server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}